#!/bin/sh
set -x
set -e

# Manage Git repos as worktrees that are contained in peer directories
# with branch names that begin with the same prefix as the name of the
# main repo in order for CDPATH and other cd completion to work properly
# and to ensure absolute file separation from other branches (which is
# more difficult to maintain using just switch/co Git approaches.
#
# * If no arguments prints the last worktree worked on (so that
#   it can be combined with a cd, see workl in aliases.sh).
#
# * If first arg is `create` then create a new worktree using the second
#   argument as the name and the third the number of an issue that should
#   be created before calling create. Every work tree must have an issue.
#   (For something simpler, just branch with no worktree.) The name and
#   issue will be added to a prefix that matches the name of the repo
#   directory and passed to the `git worktree add` command.
#
# * If one arg and it is `ls` or `list` list all current worktrees.
#
# * If two args and first is `rm` or `remove` prompt for confirmation
#   and remove worktree and branch.

CACHE="${XDG_CACHE_HOME:-$HOME/.cache}/work"

usage() {
	echo "would show usage" >&2
	exit 1
}

case "$1" in
create)
	dir="$(pdgit)"
	if test -z "$dir"; then
		echo "Creating outside of a git repo current unsupported." >&2
		exit 1
	fi
	if test -z "$2"; then
		echo "Missing name for create." >&2
		exit 1
	fi
	if test -z "$3"; then
		echo "Missing issue number." >&2
		exit 1
	fi
	if ! hasissue "$3"; then
		echo "Cannot find issue #$3, not yet created?"
		exit 1
	fi
	cd "$dir"
	ndir="../$(pwdname)-$2-$3"
	git worktree add "$ndir"
	cd "$ndir"
	mkdir -p "$CACHE"
	echo "$PWD" >"$CACHE/last"
	echo "$PWD"
	;;
list | ls) echo would list all worktrees in $REPOS ;;
rm | remove) echo would remove $1 worktree ;;
last | "") head -1 "$CACHE/last" 2>/dev/null ;;
*) usage ;;
esac
